// @import 'net.creative-tweet.library.js'

var onRun = function ( context ) {
	var doc = context.document;
	var currentPage = doc.currentPage();

	var userJSON = [doc askForUserInput:"Paste your JSON here:" initialValue:""];
	if ( !userJSON ) return false;
	var json = userJSON;
	var fwJSON = ( new Function( 'return ' + json ) )();

	var artboardPosition = 0; 
	for ( var i = 0; i < fwJSON.pages.length; i++ ) {
		var artboard = MSArtboardGroup.new();
		artboard.setName( fwJSON.pages[i].pageName );
		artboard.frame().setX( artboardPosition );
		artboard.frame().setY( 0 );
		artboard.frame().setWidth( fwJSON.pages[i].width );
		artboard.frame().setHeight( fwJSON.pages[i].height );
		// doc.addLayer( artboard );
		currentPage.addLayers( NSArray.arrayWithObjects( artboard ) );
		var artboards = doc.currentPage().artboards();

		setGrid( artboards[i], fwJSON.documentSetting.grid );
		addGuideline( artboards[i], fwJSON.pages[i].guides );
		createLayers( artboards[i], fwJSON.pages[i].layers );
		// log( fwJSON.pages[i].width );

		artboardPosition += fwJSON.pages[i].width + 100;
	}

}

function createLayers( artboard, layers ) {
	createElements( artboard, layers[0].elems );
}

function createElements( artboard, elems ) {
	for (var i = elems.length - 1; i >= 0; i--) {
		log( 'Proccessing...: ' + elems[i].name );
		var elemsType = elems[i].type;
		if ( 'rectangle' == elemsType ) {
			var shape = createRectangle( artboard, elems[i] );
			shape.setName( elems[i].name );
			// artboard.addLayers( [shape] );
		}
		if ( 'path' == elemsType ) {
			var shape = addBezier( artboard, elems[i].bezierPath[0] );
			shape.setName( elems[i].name );
			artboard.addLayers( [shape] );
			if ( null != elems[i].border ) {
				addBorder( shape, elems[i].border );
			}
		}
	};
}

function addBorder( shape, attrs ) {
	var border = shape.style().borders().addNewStylePart();
	var color = MSColor.colorWithSVGString( attrs.color );
	color.alpha = attrs.opacity;
	border.color = color;
	border.thickness = attrs.thickness;
	switch ( attrs.position ) {
		case 'center':
			border.setPosition( 0 );
			break; 
		case 'inside':
			border.setPosition( 1 );
			break; 
		case 'outside':
			border.setPosition( 2 );
			break; 
		default:
			border.setPosition( 0 );
			break; 
	}

	// edge
	// dash
}

function createRectangle( artboard, attrs ) {
	// var rectangle = doc.currentPage().addLayerOfType( 'rectangle' );
	// var rectangle = MSRectangleShape.alloc().init();
	var rectangle = artboard.addLayerOfType( 'rectangle' );

	rectangle.frame().x = attrs.left;
	rectangle.frame().y = attrs.top;
	rectangle.frame().width = attrs.width;
	rectangle.frame().height = attrs.height;

	// var container = MSShapeGroup.alloc().init();

	// container.addLayers( [rectangle] );
	log( attrs.fill );


	if ( null != attrs.fill ) {
		var shepeFill = rectangle.style().fills().addNewStylePart();
		log( shepeFill );
		shepeFill.color = MSColor.colorWithSVGString( getHexColor( attrs.fill.fillColor ) );
	}

	// artboard.addLayers( [container] );


	return rectangle;
}

function addBezier( artboard, attrs ) {
	var bezierLine = NSBezierPath.bezierPath();
	var nodes = attrs.nodes;
	bezierLine.moveToPoint( NSMakePoint( nodes[0].ancherPointX, nodes[0].ancherPointY ) );

	for ( var i = 1; i < nodes.length; i++ ) {
		var ancher        = NSMakePoint( nodes[i].ancherPointX, nodes[i].ancherPointY );
		var currentHandle = NSMakePoint( nodes[i].predPointX,   nodes[i].predPointY );
		var prevHandle    = NSMakePoint( nodes[i - 1].succPointX, nodes[i - 1].succPointY );
		// log( 'ancher:        ' + ancher );
		// log( 'currentHandle: ' + currentHandle );
		// log( 'prevHandle:    ' + prevHandle );
		[bezierLine curveToPoint:ancher controlPoint1:prevHandle controlPoint2:currentHandle];
	};
	if ( attrs.isClosed ) {
		[bezierLine 
			curveToPoint:NSMakePoint( nodes[0].ancherPointX, nodes[0].ancherPointY ) 
			controlPoint1:NSMakePoint( nodes[nodes.length - 1].succPointX, nodes[nodes.length - 1].succPointY )
			controlPoint2:NSMakePoint( nodes[0].predPointX, nodes[0].predPointY )
		];
		bezierLine.closePath();
		// log( 'closed-ancher:        ' + NSMakePoint( nodes[0].ancherPointX, nodes[0].ancherPointY ) );
		// log( 'closed-currentHandle: ' + NSMakePoint( nodes[nodes.length - 1].succPointX, nodes[nodes.length - 1].succPointY ) );
		// log( 'closed-prevHandle:    ' + NSMakePoint( nodes[0].predPointX, nodes[0].predPointY ) );
	}

	var shape = MSShapeGroup.shapeWithBezierPath( bezierLine );

	return shape;
}

function setGrid( artboard, gridAttrs ) {
	log( artboard.class() );
	// artboard.setRulerBase( { x: gridAttrs.gridOrigin.x, y: gridAttrs.gridOrigin.y} );
}

function addGuideline ( artboard, guides ) {
	var vRuler = artboard.verticalRulerData();
	var hRuler = artboard.horizontalRulerData();
	for ( var i in guides.x ) {
		vRuler.addGuideWithValue( guides.x[i] );
	}
	for ( var i in guides.y ) {
		hRuler.addGuideWithValue( guides.y[i] );
	}
}

function getHexColor( color ) {
	if( 7 == color.length ) return color;
	return color.slice( 0, 7 );
}

function createArtboard ( _attrs ) {
	var artboard = MSArtboardGroup.new();
	doc.addLayer( artboard );
	artboard.name = page.name;
	artboard.frame().x = page.x;
	artboard.frame().y = page.y;
	artboard.frame().width  = page.width;
	artboard.frame().height = page.height;
}

function createLayer() {
	var artboard = MSArtboardGroup.new();
	doc.addLayer( artboard );
	artboard.name = page.name;
	artboard.frame().x = page.x;
	artboard.frame().y = page.y;
	artboard.frame().width  = page.width;
	artboard.frame().height = page.height;
	log( 'Finished' );
}

function setFlatFill() {
	var doc = context.document;

	var rectangle = doc.currentPage().addLayerOfType( 'rectangle' );
	rectangle.setName( 'test rectangle' );
	rectangle.frame().x = 0;
	rectangle.frame().y = 0;
	rectangle.frame().width = 100;
	rectangle.frame().height = 100;

	var shepeFill = rectangle.style().fills().addNewStylePart();
	shepeFill.color = MSColor.colorWithSVGString( 'ff0000' );

}

function setGradientFill() {
	var doc = context.document;
// addStopAtLength
	var rectangle = doc.currentPage().addLayerOfType( 'rectangle' );
	rectangle.setName( 'test rectangle' );
	rectangle.frame().x = 0;
	rectangle.frame().y = 0;
	rectangle.frame().width = 100;
	rectangle.frame().height = 100;

	var shapeStyle = rectangle.style();
	shapeStyle.fills().addNewStylePart();
	var shapeFill = shapeStyle.fill();
	shapeFill.setFillType( 1 );

	var gradient = shapeFill.gradient();

	// linear
	gradient.setGradientType( 0 );

	// radial
	gradient.setGradientType( 1 );

	// angular
	gradient.setGradientType( 1 );

	gradient.setColor_atIndex_( MSColor.colorWithSVGString( '#000000' ), 0 );

	// move gradient stop
	gradient.setPoint_atIndex_( CGPointMake(0, 0), 0 );

	// set alpha
	var gradientColor = MSColor.colorWithSVGString("#FF0000");
	gradientColor.alpha = 0.5;
	gradient.setColor_atIndex_( gradientColor, 1 );
	
	// add gradient stop
	gradient.addStopAtLength( 0.75 );
}